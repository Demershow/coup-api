// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model Room {
  id        String   @id @default(cuid())
  code      String   @unique
  createdAt DateTime @default(now())
  players   Player[]
  Game      Game?
}

model User {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  players   Player[]
}

model Action {
  id            String       @id @default(cuid())
  type          ActionType
  game          Game         @relation(fields: [gameId], references: [id])
  gameId        String
  player        Player       @relation("ActionPlayer", fields: [playerId], references: [id])
  playerId      String
  target        Player?      @relation("ActionTarget", fields: [targetId], references: [id])
  targetId      String?
  status        ActionStatus
  response      String? // BLOCK, CHALLENGE, ACCEPT
  // respondedBy   Player?      @relation("Responder", fields: [respondedById], references: [id])
  respondedById String?

  createdAt DateTime @default(now())
  Player    Player   @relation(fields: [playerId], references: [id])

  @@map("actions")
}

model Player {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  room     Room     @relation(fields: [roomId], references: [id])
  roomId   String
  joinedAt DateTime @default(now())

  // Relações inversas explícitas
  actionsInitiated Action[]    @relation("ActionPlayer")
  actionsTargeted  Action[]    @relation("ActionTarget")
  TurnOrder        TurnOrder[]
  Hand             Hand[]
  Action           Action[]
}

model Game {
  id          String      @id @default(cuid())
  room        Room        @relation(fields: [roomId], references: [id])
  roomId      String      @unique
  startedAt   DateTime    @default(now())
  currentTurn Int
  deck        Card[]
  hands       Hand[]
  actions     Action[]
  turnOrder   TurnOrder[]
}

model TurnOrder {
  id       String @id @default(cuid())
  game     Game   @relation(fields: [gameId], references: [id])
  gameId   String
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  position Int
}

model Card {
  id     String   @id @default(cuid())
  type   CardType
  game   Game     @relation(fields: [gameId], references: [id])
  gameId String
  Hand   Hand[]
}

model Hand {
  id       String  @id @default(cuid())
  player   Player  @relation(fields: [playerId], references: [id])
  playerId String
  card     Card    @relation(fields: [cardId], references: [id])
  cardId   String
  revealed Boolean @default(false)
  Game     Game?   @relation(fields: [gameId], references: [id])
  gameId   String?
}

enum ActionType {
  INCOME
  FOREIGN_AID
  COUP
  TAX
  ASSASSINATE
  EXCHANGE
  STEAL
  BLOCK
  CHALLENGE
}

enum ActionStatus {
  PENDING
  BLOCKED
  CHALLENGED
  SUCCESS
  FAILED
  RESOLVED
}

enum CardType {
  DUKE
  ASSASSIN
  CAPTAIN
  CONTESSA
  AMBASSADOR
  INQUISITOR
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
